### High-Level Overview of the Proposed Data Product

To address the current bottleneck, we propose an iterative data pipeline that integrates automation, human feedback, and model optimization for continuous improvement.

![High-level overview of the data pipeline](img/pipeline-high-level.png){width="50%" height="25%"}

1. **Unlabelled Image Ingestion**  
   The pipeline begins by collecting raw, unlabelled images from the partner’s data sources (`fetch_data.py`).

2. **Automated Pre-Labelling**  
   AI models generate initial labels for key objects (e.g., `Fire`, `Smoke`, etc), reducing the need for manual annotation (`labelling.py`).

3. **Human-in-the-Loop Review**  
   Experts review and correct the ambiguous pre-labels to ensure high-quality annotations with minimal manual effort (`human_intervention.py`).

4. **Model Retraining with Verified Labels**  
  Verified labelled images are used to retrain the wildfire detection model, improving its accuracy and adaptability over time (`augmentation.py` and `train.py`).

5. **Model Optimization for Deployment**  
   Techniques like **distillation** and **quantization** compress the model, making it suitable for deployment on edge devices (`distill_quantize.py`).

Note that the names and implementations of the Python scripts will evolve throughout the course of development.

### Unlabelled Images Ingestion

Efficiently handling a growing stream of unlabelled images requires a standardized ingestion process that supports local prototyping and future cloud integration. We will implement this step in `fetch_data.py`.

#### Input

This step will ingest unlabelled image data, which serves as the input for the entire system. Around 500 new images are added each month, containing five object classes: `Fire`, `Smoke`, `Lightning`, `Vehicle`, and `Person`.

#### Process

`fetch_data.py` loads data locally (for dev/test purposes) but can later fetch from cloud storage.

#### Output

The following image directories should be produced:

* `raw/images` – used as input for the pre-labelling stage
* `raw/distilled_images` – used during the model distillation step

These folders are assumed to be locally accessible for the prototype.
