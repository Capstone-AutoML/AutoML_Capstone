### High-Level Overview of the Proposed Data Product

To address the current bottleneck, we propose an intelligent, iterative data pipeline that integrates automation, human feedback, and model optimization for continuous improvement.

![High-level overview of the data pipeline](img/pipeline-high-level.png){width="50%" height="25%"}

1. **Unlabelled Image Ingestion**  
   The pipeline begins by collecting raw, unlabelled images from the client’s data sources.

2. **Automated Pre-Labelling**  
   AI models generate initial labels for key objects (e.g `Fire`, `Smoke`, etc), reducing the need for manual annotation.

3. **Human-in-the-Loop Review**  
   Experts review and correct the pre-labels to ensure high-quality annotations with minimal manual effort.

4. **Model Retraining with Verified Labels**  
  Verified labelled images are used to retrain the wildfire detection model, improving its accuracy and adaptability over time.

1. **Model Optimization for Deployment**  
   Techniques like **distillation** and **quantization** compress the model, making it suitable for deployment on edge devices.

The pipeline is implemented through six modular scripts:
`fetch_data.py`, `labelling.py`, `augmentation.py`, `train.py`, `distill_quantize.py`, and `save_model.py`. These modules may evolve during development.

### Fetch the Data

#### Data description

The pipeline processes image data with bounding box annotations. For prototyping, we assume local storage, though the full dataset resides on GCS. It includes over 2 million unlabelled images, with 500 added monthly. The images contain five classes: `Fire`, `Smoke`, `Lightning`, `Vehicle`, and `Person`.

#### Process

`fetch_data.py` loads data locally (for dev/test purposes) but can later fetch from cloud storages.

#### Output

The following image directories should be produced:

* `raw/images` – used as input for the pre-labelling stage
* `raw/distilled_images` – used during the model distillation step

These folders are assumed to be locally accessible for the prototype.
